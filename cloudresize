#! /usr/bin/python

import os,sys, base64, time, pickle
from bootstrap import Bootstrap
from boto.sqs.connection import SQSConnection
from boto.s3.connection import S3Connection
from boto.sdb import SDBRegionInfo
from boto.sqs import SQSRegionInfo

def printUsage ( ):
  print "Usage:",sys.argv[0],"filepath","profile","delete","[localpathdest]"
  
def parseArgs ( args ):
  details = { 'filename' : args[1], 'profile' : args[2], 'delete' : args[3] };
  if len(args) > 4:
    details['localpathdest'] = args[4]
  return details

if len(sys.argv) < 4:
  printUsage()
else:
  global configuration
  configuration = Bootstrap.bootstrap()
  
  if configuration:
    details = parseArgs( sys.argv )
    
    # upload file to s3
    s3conn = S3Connection(configuration.get('AWS', 'AWSID'), configuration.get('AWS', 'SECRETKEY'))
    bucket = s3conn.get_bucket(configuration.get('AWS', 'BUCKET'))
    if not bucket:
      print "No bucket"
    else:
      
      if os.path.exists(details['filename']) or details['filename'].find('http://') != -1 or details['filename'].find('https://') != -1:
	
	if details['filename'].find('http://') == -1 and details['filename'].find('https://') == -1:
		details['tempfilename'] = str(time.time()) + "_" + os.path.basename(details['filename'])
		keydetail = os.path.join(details['profile'], "uncropped", details['tempfilename'])
	
		details['key'] = keydetail
		details['originname'] = os.path.basename(details['filename'])
		details['bucket'] = configuration.get('AWS', 'BUCKET')
	
		newkey = bucket.new_key(keydetail)
		newkey.set_contents_from_file( open(details['filename']) )
		newkey.close()
	else:
		import urlparse
		details['key'] = details['filename']
		urlparsed = urlparse.urlparse(details['key'])
		details['originname'] = os.path.basename(urlparsed.path)
		details['tempfilename'] = str(time.time()) + "_" + os.path.basename(details['originname'])

	# add process command to sqs queue
	sqsregiondata = SQSRegionInfo(name=configuration.get('AWS', 'REGION'), endpoint=configuration.get('AWS', 'SQS_ENDPOINT'))
	sqsconn = SQSConnection(configuration.get('AWS', 'AWSID'), configuration.get('AWS', 'SECRETKEY'),region=sqsregiondata)
	queue = sqsconn.get_queue(configuration.get('AWS', 'QUEUE'))
	if queue:
	  encodeddata = base64.encodestring( pickle.dumps(details) )
	  result = sqsconn.send_message( queue, encodeddata )
	  print "Added ",details['filename'],"to Queue with profile",details['profile']
	  if details['delete'] == "1":
		  os.remove(details['filename'])
		  print details['filename']," deleted"
	else:
	  print "Queue", configuration.get('AWS', 'QUEUE'),"does not exist"
      else:
	print "File", details['filename'],"doesn't exist"
