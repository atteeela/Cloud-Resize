#! /usr/bin/python


import os,sys, base64, time, pickle, commands
from bootstrap import Bootstrap
from boto.sqs.connection import SQSConnection
from boto.s3.connection import S3Connection
from boto.sdb.connection import SDBConnection

def doResize ( imagedetail, temppath, resizeprofile, resizebackend ):
  if resizebackend == 'imagemagick':
    source = os.path.join(temppath, imagedetail['tempfilename'])
    dest = os.path.join(temppath, resizeprofile['type'], imagedetail['tempfilename'])
    
    print "Resizing", source, dest
    
    import PythonMagick
    image = PythonMagick.Image(source)
    sizes = PythonMagick._PythonMagick.Geometry( long(resizeprofile['width']), long(resizeprofile['height']) )
    image.resize(sizes)
    image.write(str(dest))
    return dest
  
def getResizeProfiles( domain, profile ):
  results = domain.select('''select * from `%s` where profile = "%s"''' % ( configuration.get('AWS', 'DBDOMAIN') , profile ) )
  profiles = []
  for item in results:
    profiles.append(item)
  return profiles

global configuration
configuration = Bootstrap.bootstrap()

sdbconn = SDBConnection(configuration.get('AWS', 'AWSID'), configuration.get('AWS', 'SECRETKEY'))
domain = sdbconn.get_domain(configuration.get('AWS', 'DBDOMAIN'))

if configuration:
  sqsconn = SQSConnection(configuration.get('AWS', 'AWSID'), configuration.get('AWS', 'SECRETKEY'))
  s3conn = S3Connection(configuration.get('AWS', 'AWSID'), configuration.get('AWS', 'SECRETKEY'))
  queue = sqsconn.get_queue(configuration.get('AWS', 'QUEUE'))
  maxload = 2
  try:
    maxload = configuration.get('AWS', 'MAXLOAD')
  except:
    pass
  
  tempdir = "/tmp"
  try:
    tempdir = configuration.get('AWS', 'TEMPDIR')
  except:
    pass
  
  
  resizebackend = "imagemagick"
  try:
    resizebackend = configuration.get('AWS', 'BACKEND')
  except:
    pass
  
  while True:
    # wait for load to drop
    while os.getloadavg()[0] > maxload:
      print "Waiting for load avg to drop"
      time.sleep(10)
    
    found = False
    try:
      print "Checking queue"
      message = queue.read(60)
      if message:
	found = True
	messagedetail = message.get_body()
	imagedetail = pickle.loads(messagedetail)
	bucketname = configuration.get('AWS', 'BUCKET')
	if 'bucket' in imagedetail:
	  bucketname = imagedetail['bucket']
	
	# download from bucket
	bucket = s3conn.get_bucket(bucketname)
	key = bucket.get_key( imagedetail['key'] )
	if key:
	  print "Downloading", imagedetail['key']
	  
	  key.get_contents_to_filename( os.path.join(tempdir,imagedetail['tempfilename'] ) )
	  
	  resizeprofiles = getResizeProfiles( domain, imagedetail['profile'] )
	  
	  if len(resizeprofiles) == 0:
	    print "No matching size profiles found, discarding"
	  else:
	    for resizeprofile in resizeprofiles:
	      resizedfile = doResize( imagedetail, tempdir, resizeprofile, resizebackend )
	    
	      # upload
	      keydetail = os.path.join( imagedetail['profile'],resizeprofile['type'], imagedetail['originname'] )
	      newkey = bucket.new_key(keydetail)
	      newkey.set_contents_from_filename( resizedfile )
	      newkey.close()
	      os.unlink(resizedfile)
	    
	  # successfully proccessed, delete old
	  os.unlink( os.path.join(tempdir,imagedetail['tempfilename'] ) )
	  
	  #key.delete()
	message.delete()
    except Exception as error:
      print "Error",error
      pass
    if not found:
      print "Waiting for messages in queue"
      time.sleep(60)